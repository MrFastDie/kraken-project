syntax = "proto3";
package attacks;

import "attacks.shared.proto";

/*
-- BruteforceSubdomain
 */

// Request for starting a bruteforce subdomain attack
message BruteforceSubdomainRequest {
  // A unique id that identifies the attack
  string attack_uuid = 1;
  // The domain to use as base name. It shouldn't end in a . like DNS names.
  string domain = 2;
  // Path to a wordlist that can be used for subdomain enumeration.
  //
  // The entries in the wordlist are assumed to be line seperated.
  string wordlist_path = 3;
  // Maximum of concurrent tasks that should be spawned
  //
  // 0 means, that there should be no limit.
  uint32 concurrent_limit = 4;
}

// Response streamed by an bruteforce subdomain attack
message BruteforceSubdomainResponse {
  // Found record
  shared.DNSRecord record = 1;
}

/*
--- Certificate Transparency
 */

// Certificate transparency request
message CertificateTransparencyRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The target domain to query
  string target = 2;
  // Also include already expired certificates
  bool include_expired = 3;
  // The number of times the connection should be retried if it failed.
  uint32 max_retries = 4;
  // The interval to wait in between the retries
  // Specified in milliseconds.
  uint64 retry_interval = 5;
}


// Response to a certificate transparency request
message CertificateTransparencyResponse {
  // List of cert entries
  repeated shared.CertEntry entries = 1;
}

/*
 * Service Detection
 */

// Request for stating a tcp service detection
message ServiceDetectionRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The ip addresses / networks to scan
  repeated attacks.shared.NetOrAddress targets = 2;
  // List of single ports and port ranges
  //
  // If no values are supplied, 1-65535 is used as default
  repeated PortOrRange ports = 3;
  // The time to wait until a connection is considered failed.
  //
  // The timeout is specified in milliseconds.
  uint64 connect_timeout = 4;
  // The interval to wait for a response after connecting and sending an optional payload.
  // Specified in milliseconds.
  uint64 receive_timeout = 5;
  // The number of times the connection should be retried if it failed.
  uint32 max_retries = 6;
  // The interval that should be wait between retries on a port.
  //
  // The interval is specified in milliseconds.
  uint64 retry_interval = 7;
  // The concurrent task limit
  uint32 concurrent_limit = 8;
  // Skips the initial icmp check.
  //
  // All hosts are assumed to be reachable
  bool skip_icmp_check = 9;
}

// An (inclusive) range of ports
message PortRange {
  // The first port number in this range
  uint32 start = 1;
  // The last port number in this range
  uint32 end = 2;
}

// Either a single port or a range of them
message PortOrRange {
  // Workaround field to store a `oneof`
  oneof port_or_range {
    // A single port
    uint32 single = 1;

    // An (inclusive) range of ports
    PortRange range = 2;
  }
}

// Response to a service detection request
message ServiceDetectionResponse {
  // The ip address the service was found on
  attacks.shared.Address address = 1;
  // The port the service was found on
  uint32 port = 2;
  // Indicates how many tcp services are given and how they are to be interpreted
  ServiceCertainty tcpCertainty = 3;
  // List of tcp services, the interpretation of this field depends on the `tcpCertainty`
  repeated string tcpServices = 4;
  // Does the port speak tls? If this is `false`, `tlsCertainty` and `tlsServices` should be ignored.
  bool isTls = 5;
  // Indicates how many tls services are given and how they are to be interpreted
  ServiceCertainty tlsCertainty = 6;
  // List of tls services, the interpretation of this field depends on the `tlsCertainty`
  repeated string tlsServices = 7;
}

// Indicates how many services are returned in a ServiceCertainty and how they are to be interpreted
enum ServiceCertainty {
  // The service is unknown
  UNKNOWN = 0;
  // The service might be one of the list
  MAYBE = 1;
  // The service has been identified
  DEFINITELY = 2;
}

// Service detection request for all specified ports
message UdpServiceDetectionRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The ip addresses / networks to scan
  repeated attacks.shared.NetOrAddress targets = 2;
  // List of single ports and port ranges
  //
  // If no values are supplied, 1-65535 is used as default
  repeated PortOrRange ports = 3;
  // The concurrent task limit
  uint32 concurrent_limit = 4;
  // The number of times the packet sending should be retried if no response was received.
  uint32 max_retries = 5;
  // The interval that should be wait between retries on a port.
  //
  // The interval is specified in milliseconds.
  uint64 retry_interval = 6;
  // The time to wait until a connection is considered failed.
  //
  // The timeout is specified in milliseconds.
  uint64 timeout = 7;
}

// Response to a service detection request
message UdpServiceDetectionResponse {
  // The ip address the service was found on
  attacks.shared.Address address = 1;
  // Port value
  uint32 port = 2;
  // Indicates how many services are given and how they are to be interpreted
  ServiceCertainty certainty = 3;
  // List of services, the interpretation of this field depends on the `certainty`
  repeated string services = 4;
}

/*
 * Hosts alive check
 */

// Request for checking if hosts are alive
message HostsAliveRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The hosts that should be checked
  repeated attacks.shared.NetOrAddress targets = 2;
  // The timeout, specified in milliseconds.
  uint64 timeout = 3;
  // The concurrent task limit
  uint32 concurrent_limit = 4;
}

// Response for checking which hosts are alive
message HostsAliveResponse {
  // the hosts that responded
  attacks.shared.Address host = 1;
}

/*
 * DNS resolution
 */
message DnsResolutionRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The domains to resolve
  repeated string targets = 2;
  // Maximum of concurrent tasks that should be spawned
  //
  // 0 means, that there should be no limit.
  uint32 concurrent_limit = 3;
}

// Response streamed by a dns resolution attack
message DnsResolutionResponse {
  // Found record
  shared.DNSRecord record = 1;
}

/*
 * DNS TXT scan
 */
message DnsTxtScanRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The domains to resolve
  repeated string targets = 2;
}

// DNS TXT scan response
message DnsTxtScanResponse {
  // Found record
  shared.DnsTxtScan record = 1;
}

/*
 * OS detection
 */
message OsDetectionRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The ip addresses / networks to scan
  repeated attacks.shared.NetOrAddress targets = 2;
  // set to skip open port detection and use this port for TCP fingerprinting
  optional uint32 fingerprint_port = 3;
  // set to perform OS detection through SSH header
  optional uint32 ssh_port = 4;
  // timeout for TCP fingerprint detection task, in ms
  uint64 fingerprint_timeout = 5;
  // timeout for establishing an SSH connection, if ssh_port is set, in ms
  uint64 ssh_connect_timeout = 6;
  // timeout for the full SSH os detection task, in ms
  uint64 ssh_timeout = 7;
  // If fingerprint_port is not set, timeout for each port how long to wait for ACKs
  uint64 port_ack_timeout = 8;
  // If fingerprint_port is not set, maximum parallel TCP SYN requests
  uint32 port_parallel_syns = 9;
  // Maximum of concurrent host scans that should be spawned
  //
  // 0 means, that there should be no limit.
  uint32 concurrent_limit = 10;
}

// OS detection response
message OsDetectionResponse {
  // the hosts that we detected the OS on
  attacks.shared.Address host = 1;
  // The operating system type that was deduced here
  shared.OperatingSystem os = 2;
  // Additional human readable hints
  repeated string hints = 3;
  // For operating system types other than unknown, this may contain detected version(s) or names -
  // can be multiple in case different probes report different results.
  repeated string versions = 4;
}

// Implemented by leech; allows kraken to request attack from a leech
service ReqAttackService {
  rpc BruteforceSubdomains(BruteforceSubdomainRequest) returns (stream BruteforceSubdomainResponse);
  rpc QueryCertificateTransparency(CertificateTransparencyRequest) returns (CertificateTransparencyResponse);
  rpc ServiceDetection(ServiceDetectionRequest) returns (stream ServiceDetectionResponse);
  rpc UdpServiceDetection(UdpServiceDetectionRequest) returns (stream UdpServiceDetectionResponse);
  rpc HostsAliveCheck(HostsAliveRequest) returns (stream HostsAliveResponse);
  rpc DnsResolution(DnsResolutionRequest) returns (stream DnsResolutionResponse);
  rpc DnsTxtScan(DnsTxtScanRequest) returns (stream DnsTxtScanResponse);
  rpc OsDetection(OsDetectionRequest) returns (stream OsDetectionResponse);
}

/*
------------------------ PushAttack -------------------------------
 */

// Request to push an attack which has been started manually through the leech's cli
message PushAttackRequest {
  // The uuid of a workspace
  string workspace_uuid = 1;

  // The user's api key
  string api_key = 2;

  // The attack's type as well as its response
  oneof response {
    // Response streamed by an bruteforce subdomain attack
    RepeatedBruteforceSubdomainResponse bruteforce_subdomain = 3;
    // Response to a certificate transparency request
    CertificateTransparencyResponse certificate_transparency = 5;
    // Response to a service detection request
    RepeatedServiceDetectionResponse service_detection = 6;
    // Response for checking which hosts are alive
    RepeatedHostsAliveResponse hosts_alive = 7;
    // Response streamed by a dns resolution attack
    RepeatedDnsResolutionResponse dns_resolution = 8;
    // Response streamed by a dns resolution attack
    RepeatedUdpServiceDetectionResponse udp_service_detection = 9;
    // Response streamed by a dns txt scan attack
    RepeatedDnsTxtScanResponse dns_txt_scan = 10;
    // Response to a operating system detection request
    RepeatedOsDetectionResponse os_detection = 11;
  }
}

// Thin wrapper to have a `repeated BruteforceSubdomainResponse` in a `oneof`
message RepeatedBruteforceSubdomainResponse {
  // repeated BruteforceSubdomainResponse
  repeated BruteforceSubdomainResponse responses = 1;
}
// Thin wrapper to have a `repeated ServiceDetectionResponse` in a `oneof`
message RepeatedServiceDetectionResponse {
  // repeated ServiceDetectionResponse
  repeated ServiceDetectionResponse responses = 1;
}
// Thin wrapper to have a `repeated HostsAliveResponse` in a `oneof`
message RepeatedHostsAliveResponse {
  // repeated HostsAliveResponse
  repeated HostsAliveResponse responses = 1;
}
// Thin wrapper to have a `repeated DnsResolutionResponse` in a `oneof`
message RepeatedDnsResolutionResponse {
  // repeated DnsResolutionResponse
  repeated DnsResolutionResponse responses = 1;
}
// Thin wrapper to have a `repeated UdpServiceDetectionResponse` in a `oneof`
message RepeatedUdpServiceDetectionResponse {
  // repeated UdpServiceDetectionResponse
  repeated UdpServiceDetectionResponse responses = 1;
}
// Thin wrapper to have a `repeated DnsTxtScanResponse` in a `oneof`
message RepeatedDnsTxtScanResponse {
  // repeated DnsTxtScanResponse
  repeated DnsTxtScanResponse responses = 1;
}
// Thin wrapper to have a `repeated OsDetectionResponse` in a `oneof`
message RepeatedOsDetectionResponse {
  // repeated OsDetectionResponse
  repeated OsDetectionResponse responses = 1;
}

// Response to a manually pushed attack
message PushAttackResponse {
  // The attack uuid assigned by kraken
  string uuid = 1;
}

// Implemented by kraken; allows leeches to push manual attacks via cli
service PushAttackService {
  rpc PushAttack(PushAttackRequest) returns (PushAttackResponse);
}


/*
------------------------ Backlog -------------------------------
 */

// Request for a chunk of responses to be processed
message BacklogRequest {
  // Responses left from some previous attacks
  repeated AnyAttackResponse responses = 1;
}

// Response to a backlog request
//
// Might contain additional information in the future:
// What did go wrong (custom error type)? Which responses could be processed?
message BacklogResponse {}

// union of all messages which might be returned as response to any attack request
message AnyAttackResponse {
  // the attack that produced the response
  string attack_uuid = 1;

  // union of all messages which might be returned as response to any attack request
  oneof response {
    // Response streamed by an bruteforce subdomain attack
    BruteforceSubdomainResponse bruteforce_subdomain = 2;
    // Response to a certificate transparency request
    CertificateTransparencyResponse certificate_transparency = 4;
    // Response to a service detection request
    ServiceDetectionResponse service_detection = 5;
    // Response for checking which hosts are alive
    HostsAliveResponse hosts_alive = 6;
    // Response streamed by a dns resolution attack
    DnsResolutionResponse dns_resolution = 7;
    // Response streamed by a dns resolution attack
    UdpServiceDetectionResponse udp_service_detection = 8;
    // Response streamed by a dns txt scan attack
    DnsTxtScanResponse dns_txt_scan = 9;
    // Response to a operating system detection request
    OsDetectionResponse os_detection = 10;
  }
}

// Implemented by kraken; allows leeches to upload results that failed to upload previously
service BacklogService {
  rpc SubmitBacklog(BacklogRequest) returns (BacklogResponse);
}